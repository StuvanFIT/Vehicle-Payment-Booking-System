//Name:Steven Kaing
//ID: 33155666
//Last Modified: 04/04/2024

package edu.monash.fit2099.bookings;
import edu.monash.fit2099.interfaces.*;
import edu.monash.fit2099.actions.*;



import java.util.ArrayList;
import java.util.List;

/**
 * <h1>User class</h1>
 * User represents a specific user in the system
 * @author Steven Kaing
 * @version 1.0.0
 * @since 04/04/2024
 */
public class User implements ActionCapable {

    //Private Attributes:
    private double balance; //Stores users balance
    private boolean isUserDone;
    //Create ArrayList of Bookings: User should manage their bookings
    private List<Booking> bookings_list = new ArrayList<Booking>();
    //Create ArrayList of Payment Services:
    private List<Payment> payment_list = new ArrayList<Payment>();


    /**
     *A constructor for the User class
     * @param balance_val the starting balance in the user's balance. Normally, it would be set to 0
     */
    public User(double balance_val){
        this.balance = balance_val;
        this.isUserDone = false;
    }


    /**
     *This is a getter method for returning the User's balance
     * @return a double representing User's current balance
     */
    public double getBalance(){
        return this.balance;
    }

    /**
     * This is a getter method for returning the status of IsUserDone
     * @return the boolean representing IsUserDone current status
     */
    public boolean getIsUserDone(){
        return this.isUserDone;
    }


    /**
     * This is a setter method for setting balance amount
     * @param new_balance the new User balance amount
     */
    public void setBalance(double new_balance){
        this.balance = new_balance;
    }

    /**
     * This is a setter method for setting the status of isUserDone
     * @param user_flag  a boolean value; true of false
     */
    public void setUserDone(boolean user_flag){
        this.isUserDone = user_flag;
    }

    /**
     * This method adds balance to the current amount
     * @param balance amount to be added into user balance
     */
    public void addBalance(double balance) { this.balance += balance;}

    /**
     * This method will add booked vehicles into the booking list
     * @param booking booked vehicle to be added into list
     */
    public void addBookings(Booking booking){
        bookings_list.add(booking);
    }

    /**
     * Adds payment service methods the User has access to
     * @param paymentMethod the payment service to be added to User's accessible payment list
     */
    public void addPayment(Payment paymentMethod){
        payment_list.add(paymentMethod);
    }

    /**
     * Displays all currently booked vehicles in the system
     */
    public void displayBookedVehicles(){
        String display_string;
        for (Booking booked_vehicle: bookings_list){
            display_string = booked_vehicle.toString();
            System.out.format("\nBooked Vehicles:\n %s\n",display_string);
        }
    }

    /**
     * This method removes a particular booking in the booking list
     * @param booking
     * @return a boolean value; true or false if the remove booking action is valid
     */
    public boolean removeBooking(Booking booking){
        return (bookings_list.remove(booking));
    }


    /**
     * Adds the costs of each booked vehicle and calculates total cost for confirmed booking. The booked list is also cleared
     * @return a double value representing the total price of all booked vehicles
     */
    public double confirmBookings(){
        double total_price = 0;
        double final_balance;
        //Accumulate total price:
        for (Booking curr_booking: bookings_list){
            total_price += curr_booking.getVehiclePrice();
        }
        final_balance = this.getBalance() - total_price;
        this.setBalance(final_balance);

        bookings_list.clear();
        return total_price;
    }

    /**
     * allowableActions explicitly indicates the list of actions that can be generated by the user class
     * @return a list of actions the User is capable of implementing
     */
    @Override
    public List<Action> allowableActions(){
        List<Action> actions = new ArrayList<Action>();

        for (Payment payment: payment_list){
            actions.add(new AddBalanceAction(payment));
        }
        actions.add(new DisplayBookingAction());
        actions.add(new ViewBalanceAction());
        actions.add(new ConfirmAction());
        actions.add(new ExitAction());

        //Note that this for loop does not execute at the very start when the menu is first displayed as there are no bookings
        //in the booking list yet.
        for (Booking booking: bookings_list){
            actions.add(new RemoveBookingAction(booking));
        }

        return actions;
    }
}
